package id.rezyfr.routinist.presentation.utilimport kotlinx.datetime.Clockimport kotlinx.datetime.DateTimeUnitimport kotlinx.datetime.Instantimport kotlinx.datetime.LocalDateTimeimport kotlinx.datetime.TimeZoneimport kotlinx.datetime.formatimport kotlinx.datetime.format.FormatStringsInDatetimeFormatsimport kotlinx.datetime.format.byUnicodePatternimport kotlinx.datetime.plusimport kotlinx.datetime.toInstantimport kotlinx.datetime.toLocalDateTimefun String?.toLocalDateTimeOrNull(): LocalDateTime? {    return if (!this.isNullOrBlank()) {        try {            Instant.parse(this).toLocalDateTime(TimeZone.UTC)        } catch (e: Exception) {            null        }    } else null}@OptIn(FormatStringsInDatetimeFormats::class)fun LocalDateTime?.toFormattedString(format: String = "yyyy-MM-dd'T'HH:mm:ss'Z'"): String {    return try {        val formatter = LocalDateTime.Format {            byUnicodePattern(format)        }        this?.format(formatter).orEmpty()    } catch (e: Exception) {        println("Error converting LocalDateTime to formatted string: ${e.message}")        ""    }}fun getUpcomingDays(daysAhead: Int): List<Pair<String, String>> {    val today = Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault()).date    return (0..daysAhead).map { offset ->        val date = today.plus(offset, DateTimeUnit.DAY)        val dayName = date.dayOfWeek.name.take(3).lowercase().replaceFirstChar { it.uppercase() } // e.g., Mon        val dayNumber = date.dayOfMonth.toString() // e.g., 16        dayName to dayNumber    }}fun getTodayNumber(): String {    val today = Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault()).date    return today.dayOfMonth.toString()}